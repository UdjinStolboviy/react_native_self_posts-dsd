{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/PRACTIC REACT-NATIVE/react_native_self_posts/src/screens/PostScreen.js\";\nimport React, { useEffect, useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Item, HeaderButtons } from \"react-navigation-header-buttons\";\nimport { AppHeaderIcon } from \"../components/AppHeaderIcon\";\nimport { THEME } from \"../theme\";\nimport { removePost, toggleBooked } from \"../store/actions/post\";\nexport var PostScreen = function PostScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var postId = navigation.getParam(\"postId\");\n  var post = useSelector(function (state) {\n    return state.post.allPosts.find(function (p) {\n      return p.id === postId;\n    });\n  });\n  var booked = useSelector(function (state) {\n    return state.post.bookedPosts.some(function (post) {\n      return post.id === postId;\n    });\n  });\n  useEffect(function () {\n    navigation.setParams({\n      booked: booked\n    });\n  }, [booked]);\n  var toggleHandler = useCallback(function () {\n    dispatch(toggleBooked(postId));\n  }, [dispatch, postId]);\n  useEffect(function () {\n    navigation.setParams({\n      toggleHandler: toggleHandler\n    });\n  }, [toggleHandler]);\n\n  var removeHandler = function removeHandler() {\n    Alert.alert(\"Удаление поста\", \"Вы точно хотите удалить пост?\", [{\n      text: \"Отменить\",\n      style: \"cancel\"\n    }, {\n      text: \"Удалить\",\n      style: \"destructive\",\n      onPress: function onPress() {\n        navigation.navigate(\"Main\");\n        dispatch(removePost(postId));\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  if (!post) {\n    return null;\n  }\n\n  return React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: post.img\n    },\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.textWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, post.text)), React.createElement(Button, {\n    title: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n    color: THEME.DANGER_COLOR,\n    onPress: removeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n};\n\nPostScreen.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  var date = navigation.getParam(\"date\");\n  var booked = navigation.getParam(\"booked\");\n  var toggleHandler = navigation.getParam(\"toggleHandler\");\n  var iconName = booked ? \"ios-star\" : \"ios-star-outline\";\n  return {\n    headerTitle: \"Пост от \" + new Date(date).toLocaleDateString(),\n    headerRight: React.createElement(HeaderButtons, {\n      HeaderButtonComponent: AppHeaderIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, React.createElement(Item, {\n      title: \"Take photo\",\n      iconName: iconName,\n      onPress: toggleHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }))\n  };\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    width: \"100%\",\n    height: 200\n  },\n  textWrap: {\n    padding: 10\n  },\n  title: {\n    fontFamily: \"open-regular\"\n  }\n});","map":{"version":3,"sources":["/Users/macbook/Desktop/PRACTIC REACT-NATIVE/react_native_self_posts/src/screens/PostScreen.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","Item","HeaderButtons","AppHeaderIcon","THEME","removePost","toggleBooked","PostScreen","navigation","dispatch","postId","getParam","post","state","allPosts","find","p","id","booked","bookedPosts","some","setParams","toggleHandler","removeHandler","Alert","alert","text","style","onPress","navigate","cancelable","uri","img","styles","image","textWrap","title","DANGER_COLOR","navigationOptions","date","iconName","headerTitle","Date","toLocaleDateString","headerRight","StyleSheet","create","width","height","padding","fontFamily"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Image,\n  Button,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Item, HeaderButtons } from \"react-navigation-header-buttons\";\nimport { AppHeaderIcon } from \"../components/AppHeaderIcon\";\n\nimport { THEME } from \"../theme\";\nimport { removePost, toggleBooked } from \"../store/actions/post\";\n\nexport const PostScreen = ({ navigation }) => {\n  const dispatch = useDispatch();\n  const postId = navigation.getParam(\"postId\");\n\n  const post = useSelector((state) =>\n    state.post.allPosts.find((p) => p.id === postId)\n  );\n\n  const booked = useSelector((state) =>\n    state.post.bookedPosts.some((post) => post.id === postId)\n  );\n\n  useEffect(() => {\n    navigation.setParams({ booked });\n  }, [booked]);\n\n  const toggleHandler = useCallback(() => {\n    dispatch(toggleBooked(postId));\n  }, [dispatch, postId]);\n\n  useEffect(() => {\n    navigation.setParams({ toggleHandler });\n  }, [toggleHandler]);\n\n  const removeHandler = () => {\n    Alert.alert(\n      \"Удаление поста\",\n      \"Вы точно хотите удалить пост?\",\n      [\n        {\n          text: \"Отменить\",\n          style: \"cancel\",\n        },\n        {\n          text: \"Удалить\",\n          style: \"destructive\",\n          onPress: () => {\n            navigation.navigate(\"Main\");\n            dispatch(removePost(postId));\n          },\n        },\n      ],\n      { cancelable: false }\n    );\n  };\n\n  if (!post) {\n    return null;\n  }\n\n  return (\n    <ScrollView>\n      <Image source={{ uri: post.img }} style={styles.image} />\n      <View style={styles.textWrap}>\n        <Text style={styles.title}>{post.text}</Text>\n      </View>\n      <Button\n        title=\"Удалить\"\n        color={THEME.DANGER_COLOR}\n        onPress={removeHandler}\n      />\n    </ScrollView>\n  );\n};\n\nPostScreen.navigationOptions = ({ navigation }) => {\n  const date = navigation.getParam(\"date\");\n  const booked = navigation.getParam(\"booked\");\n  const toggleHandler = navigation.getParam(\"toggleHandler\");\n  const iconName = booked ? \"ios-star\" : \"ios-star-outline\";\n  return {\n    headerTitle: \"Пост от \" + new Date(date).toLocaleDateString(),\n    headerRight: (\n      <HeaderButtons HeaderButtonComponent={AppHeaderIcon}>\n        <Item title=\"Take photo\" iconName={iconName} onPress={toggleHandler} />\n      </HeaderButtons>\n    ),\n  };\n};\n\nconst styles = StyleSheet.create({\n  image: {\n    width: \"100%\",\n    height: 200,\n  },\n  textWrap: {\n    padding: 10,\n  },\n  title: {\n    fontFamily: \"open-regular\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}